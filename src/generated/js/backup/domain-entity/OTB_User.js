// OTB_User Entity
// 
// Generated by IC STRATEGY on Mon Nov 27 13:58:07 CET 2017

//
// WARNING: Do not change this code; it will be overwritten by the next generation run!
//          Change the code only in the Visual Paradigm Project.

import * as Attribute from '../../../js/3-domain/meta/Attribute';
import {Association} from '../../../js/3-domain/meta/Association';
import {Entity} from '../../../js/3-domain/meta/Entity';
import * as firebase from 'firebase';
import {FirebaseManager} from '../../../js/4-infrastructure/databaseManagers/FirebaseManager';
var ErrorActions = require('../../../js/3-domain/actions/ErrorActions');
import * as _ from 'lodash';

export class OTB_User extends Entity {
   constructor() {
       super();
       this.type = 'OTB_User';
       this.controller = require('../controller/OTB_User');
       this.isPersistent = true;
       this.hasUrl = false;
       this.attributes = _.extend(this.attributes, {
           displayName: new class extends Attribute.TextAttribute {
               constructor(){
                   super();
                   this.name = 'displayName';
                   this.label = 'displayName';
                   this.description = '';
                   this.defaultValue = '';
                   this.chartParameters = {

                   };
                   this.visibility = 'Public';
               }
           }(),
           email: new class extends Attribute.EmailAttribute {
               constructor(){
                   super();
                   this.name = 'email';
                   this.label = 'email';
                   this.description = '';
                   this.defaultValue = '';
                   this.chartParameters = {

                   };
                   this.visibility = 'Public';
               }
           }(),
           roles: new class extends Attribute.BooleanObjectAttribute {
               constructor(){
                   super();
                   this.name = 'roles';
                   this.label = 'roles';
                   this.description = '';
                   this.defaultValue = {};
                   this.chartParameters = {

                   };
                   this.visibility = 'Public';
               }
           }()
       });
       this.associations = _.extend(this.associations, {
           ownCommandCategories: new class extends Association {
               constructor(){
                   super();
                   this.name = 'CommandCategoryCreator';
                   this.thisName = 'ownCommandCategories';
                   this.thisIsComposite = true;
                   this.thisCardinality = 'single';
                   this.thisIsMandatory = true;
                   this.thisIsNavigable = true;
                   this.thatName = 'commandCategoryCreator';
                   this.thisEntity = require('./OTB_User');
                   this.thatEntity = require('./OTB_UserCommandCategory');
                   this.thatIsComposite = false;
                   this.thatCardinality = 'multiple';
                   this.thatIsMandatory = false;
                   this.thatIsNavigable = true;
               }
           }(),
           ownLevelRanks: new class extends Association {
               constructor(){
                   super();
                   this.name = 'LevelRanksUser';
                   this.thisName = 'ownLevelRanks';
                   this.thisIsComposite = true;
                   this.thisCardinality = 'single';
                   this.thisIsMandatory = true;
                   this.thisIsNavigable = true;
                   this.thatName = 'levelRanksUser';
                   this.thisEntity = require('./OTB_User');
                   this.thatEntity = require('./OTB_LevelRanks');
                   this.thatIsComposite = false;
                   this.thatCardinality = 'single';
                   this.thatIsMandatory = true;
                   this.thatIsNavigable = true;
               }
           }(),
           ownPointRanks: new class extends Association {
               constructor(){
                   super();
                   this.name = 'PointRanksUser';
                   this.thisName = 'ownPointRanks';
                   this.thisIsComposite = true;
                   this.thisCardinality = 'single';
                   this.thisIsMandatory = true;
                   this.thisIsNavigable = true;
                   this.thatName = 'pointRanksUser';
                   this.thisEntity = require('./OTB_User');
                   this.thatEntity = require('./OTB_PointRanks');
                   this.thatIsComposite = false;
                   this.thatCardinality = 'single';
                   this.thatIsMandatory = true;
                   this.thatIsNavigable = true;
               }
           }(),
           ownLevels: new class extends Association {
               constructor(){
                   super();
                   this.name = 'LevelUser';
                   this.thisName = 'ownLevels';
                   this.thisIsComposite = false;
                   this.thisCardinality = 'single';
                   this.thisIsMandatory = true;
                   this.thisIsNavigable = true;
                   this.thatName = 'levelUser';
                   this.thisEntity = require('./OTB_User');
                   this.thatEntity = require('./OTB_LevelParticipation');
                   this.thatIsComposite = false;
                   this.thatCardinality = 'multiple';
                   this.thatIsMandatory = false;
                   this.thatIsNavigable = true;
               }
           }(),
           ownVariableCategories: new class extends Association {
               constructor(){
                   super();
                   this.name = 'VariableCategoryCreator';
                   this.thisName = 'ownVariableCategories';
                   this.thisIsComposite = true;
                   this.thisCardinality = 'single';
                   this.thisIsMandatory = true;
                   this.thisIsNavigable = true;
                   this.thatName = 'variableCategoryCreator';
                   this.thisEntity = require('./OTB_User');
                   this.thatEntity = require('./OTB_UserVariableCategory');
                   this.thatIsComposite = false;
                   this.thatCardinality = 'multiple';
                   this.thatIsMandatory = false;
                   this.thatIsNavigable = true;
               }
           }(),
           ownFunctionCategories: new class extends Association {
               constructor(){
                   super();
                   this.name = 'FunctionCategoryCreator';
                   this.thisName = 'ownFunctionCategories';
                   this.thisIsComposite = true;
                   this.thisCardinality = 'single';
                   this.thisIsMandatory = true;
                   this.thisIsNavigable = true;
                   this.thatName = 'functionCategoryCreator';
                   this.thisEntity = require('./OTB_User');
                   this.thatEntity = require('./OTB_UserFunctionCategory');
                   this.thatIsComposite = false;
                   this.thatCardinality = 'multiple';
                   this.thatIsMandatory = false;
                   this.thatIsNavigable = true;
               }
           }(),
           ownPlugins: new class extends Association {
               constructor(){
                   super();
                   this.name = 'OwnPlugins';
                   this.thisName = 'ownPlugins';
                   this.thisIsComposite = false;
                   this.thisCardinality = 'single';
                   this.thisIsMandatory = true;
                   this.thisIsNavigable = true;
                   this.thatName = 'pluginCreator';
                   this.thisEntity = require('./OTB_User');
                   this.thatEntity = require('./OTB_Plugin');
                   this.thatIsComposite = false;
                   this.thatCardinality = 'multiple';
                   this.thatIsMandatory = false;
                   this.thatIsNavigable = true;
               }
           }(),
           usedPlugins: new class extends Association {
               constructor(){
                   super();
                   this.name = 'UsedPlugins';
                   this.thisName = 'usedPlugins';
                   this.thisIsComposite = false;
                   this.thisCardinality = 'multiple';
                   this.thisIsMandatory = false;
                   this.thisIsNavigable = true;
                   this.thatName = 'pluginUsers';
                   this.thisEntity = require('./OTB_User');
                   this.thatEntity = require('./OTB_Plugin');
                   this.thatIsComposite = false;
                   this.thatCardinality = 'multiple';
                   this.thatIsMandatory = false;
                   this.thatIsNavigable = true;
               }
           }(),
           activeDefaultCommands: new class extends Association {
               constructor(){
                   super();
                   this.name = 'DefaultCommands';
                   this.thisName = 'activeDefaultCommands';
                   this.thisIsComposite = false;
                   this.thisCardinality = 'multiple';
                   this.thisIsMandatory = false;
                   this.thisIsNavigable = false;
                   this.thatName = 'defaultCommandUsage';
                   this.thisEntity = require('./OTB_User');
                   this.thatEntity = require('./OTB_DefaultCommand');
                   this.thatIsComposite = false;
                   this.thatCardinality = 'multiple';
                   this.thatIsMandatory = false;
                   this.thatIsNavigable = true;
               }
           }(),
           ownPoints: new class extends Association {
               constructor(){
                   super();
                   this.name = 'PointUser';
                   this.thisName = 'ownPoints';
                   this.thisIsComposite = false;
                   this.thisCardinality = 'single';
                   this.thisIsMandatory = true;
                   this.thisIsNavigable = true;
                   this.thatName = 'pointUser';
                   this.thisEntity = require('./OTB_User');
                   this.thatEntity = require('./OTB_PointParticipation');
                   this.thatIsComposite = false;
                   this.thatCardinality = 'multiple';
                   this.thatIsMandatory = false;
                   this.thatIsNavigable = true;
               }
           }(),
           ownQueueVideos: new class extends Association {
               constructor(){
                   super();
                   this.name = 'QueueUser';
                   this.thisName = 'ownQueueVideos';
                   this.thisIsComposite = true;
                   this.thisCardinality = 'single';
                   this.thisIsMandatory = true;
                   this.thisIsNavigable = true;
                   this.thatName = 'queueUser';
                   this.thisEntity = require('./OTB_User');
                   this.thatEntity = require('./OTB_QueueVideo');
                   this.thatIsComposite = false;
                   this.thatCardinality = 'multiple';
                   this.thatIsMandatory = false;
                   this.thatIsNavigable = true;
               }
           }(),
           ownHistoryVideos: new class extends Association {
               constructor(){
                   super();
                   this.name = 'HistoryUser';
                   this.thisName = 'ownHistoryVideos';
                   this.thisIsComposite = true;
                   this.thisCardinality = 'single';
                   this.thisIsMandatory = true;
                   this.thisIsNavigable = true;
                   this.thatName = 'historyUser';
                   this.thisEntity = require('./OTB_User');
                   this.thatEntity = require('./OTB_HistoryVideo');
                   this.thatIsComposite = false;
                   this.thatCardinality = 'multiple';
                   this.thatIsMandatory = false;
                   this.thatIsNavigable = true;
               }
           }()
       });
   };
   getCurrentUser() {
       var defer = $.Deferred();
var self = this;
firebase.auth().onAuthStateChanged(function(authData) {
    if (authData && authData.uid) {
        self.id = authData.uid;
        var userRef = firebase.database().ref( 'OTB_User/' + self.id);
        userRef.once('value', function(userSnapshot) {
            var userObject = userSnapshot.val();
            if (userObject) {
                self.setValues({id: userObject.attributes.id, email: userObject.attributes.email, displayName: userObject.attributes.displayName}, {}, true);
                self.id = userObject.attributes.id;
                defer.resolve(self);
            } else {
                defer.resolve(null);
            }
        });
    } else {
        defer.resolve(null);
    }
});
return defer.promise();
   };
   handleLogOut() {
       // TODO: Refactor Firebase interaction to Infrastructure layer

var defer = $.Deferred();
var ref = new Firebase(FirebaseManager.firebaseRoot());
ref.unauth(function(error) {
    if (!error) {
        defer.resolve(that);
    } else {
        ErrorActions.add({ error: 'Afmelden mislukt'});
    }
});
return defer.promise();
   };
   hasRole(role) {
       
return this.get('roles') && _.keys(this.get('roles')).indexOf(role.trim()) > -1;
   };

};
