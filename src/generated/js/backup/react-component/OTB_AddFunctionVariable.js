// OTB_AddFunctionVariable React Component
//
// Generated by IC STRATEGY
//
// WARNING: Do not change this code; it will be overwritten by the next generation run!
//          Change the code only in the Visual Paradigm Project.

import React from 'react';
import * as _ from 'lodash';
var DomainAPI = require('../domain-entity/DomainAPI');
import {Form} from '../../../js/1-presentation/services/meta/Form';
import * as FormField from '../../../js/1-presentation/services/meta/FormField';
import OTB_ButtonCommand from './OTB_ButtonCommand';

class OTB_AddFunctionVariable extends React.Component {
   constructor(props) {
       super(props);
   };
   static defaultProps = {
           function: null,
           application: null,
           user: null
   };
   render() {
       var self = this;
return(
    <tr>
        <td><OTB_ButtonCommand title={"Add Variable"} style={"button"} onClick={self.onClick} /></td>
        <td></td>
        <td></td>
    </tr>
);
   };
   onClick = () => {
       var self = this;
        var defaultTreeObj = {nodes: self.props.application.get('appVariableCategories')};
        var customTreeObj = {nodes: self.props.user.get('ownVariableCategories')};
        _.each(defaultTreeObj['nodes'], function (obj, index) {
            defaultTreeObj['nodes'][index] = _.extend(obj, {nodes: obj.get('categoryCommandVariables')});
        });
        _.each(customTreeObj['nodes'], function (obj, index) {
            customTreeObj['nodes'][index] = _.extend(obj, {nodes: obj.get('userCategoryVariables')});
        });

        class SelectForm extends Form {
            constructor() {
                super();
                this.name = 'CommandVariableSelectForm';
                this.title = 'CommandVariable selecteren';
                this.fields = {
                    defaultIds: new class extends FormField.TreeView {
                        constructor() {
                            super();
                            this.name = 'defaultIds';
                            this.sequence = '01';
                            this.attribute = {
                                name: 'Default Variables',
                                tree: defaultTreeObj,
                                label: 'Default Variables'
                            };
                            this.width = '12';
                            this.offset = '0';
                            this.getFocus = true;
                        }
                    }(),
                    customIds: new class extends FormField.TreeView {
                        constructor() {
                            super();
                            this.name = 'customIds';
                            this.sequence = '01';
                            this.attribute = {name: 'Custom Variables', tree: customTreeObj, label: 'Custom Variables'};
                            this.width = '12';
                            this.offset = '0';
                            this.getFocus = true;
                        }
                    }()
                };
                delete this.buttons.remove;
            };
        }

        var form = new SelectForm().open();
        $.when(form).done(function (formData) {
            if (formData) {
                var Function = self.props.function;
                if (formData['values']) {
                    _.each(formData['values']['defaultIds'], function (id) {
                        _.each(self.props.application.get('appVariableCategories'), function (category) {
                            _.each(category.get('categoryCommandVariables'), function (variable) {
                                if (variable.id == id) {
                                    Function.add('functionVariables', variable);
                                    DomainAPI.OTB_FunctionUpdate(Command);
                                }
                            });
                        });
                    });
                    _.each(formData['values']['customIds'], function (id) {
                        _.each(self.props.user.get('ownVariableCategories'), function (category) {
                            _.each(category.get('userCategoryVariables'), function (variable) {
                                if (variable.id == id) {
                                    Function.add('commandVariables', variable);
                                    DomainAPI.OTB_FunctionUpdate(Command);
                                }
                            });
                        });
                    });
                }
            }
        });
   };
   componentDidMount() {
   };
   componentWillUnmount() {
   };
}

export default OTB_AddFunctionVariable;
