// OTB_PublishCustomCategory React Component
//
// Generated by IC STRATEGY
//
// WARNING: Do not change this code; it will be overwritten by the next generation run!
//          Change the code only in the Visual Paradigm Project.

import React from 'react';
import * as _ from 'lodash';
var DomainAPI = require('../domain-entity/DomainAPI');
import {Form} from '../../../js/1-presentation/services/meta/Form';
import * as FormField from '../../../js/1-presentation/services/meta/FormField';
import OTB_ButtonCommand from './OTB_ButtonCommand';

class OTB_PublishCustomCategory extends React.Component {
   constructor(props) {
       super(props);
   };
   static defaultProps = {
           application: null,
           userCommandCategory: null,
           user: null
   };
   render() {
       var self = this;
       if (true){ 
           return(
               <li className={"publish-custom-category " + ""} style={self.props.style ||{}} >
                  <OTB_ButtonCommand onClick={self.publishCategory} title={'Publish as plugin'} iconClass={'icon mif-upload'} />
               </li>
           );
       } else {
           return (<span />);
       }
   };
   publishCategory = () => {
       var self = this;
var category = self.props.userCommandCategory;
var commands = category.get('userCategoryCommands');
var variables = [];
var functions = [];
commands.map(function(cmd, index){
    variables = variables.concat(cmd.get('commandVariables'));
    functions = functions.concat(cmd.get('commandFunctions'));
});
variables = _.uniqBy(variables, 'id');
functions = _.uniqBy(functions, 'id');

var DomainEntitiesList = require('../domain-entity/DomainEntitiesList');
var OTB_Plugin = DomainEntitiesList('OTB_Plugin');
var Entity = new OTB_Plugin();
variables.map(function(v, i){
    Entity.add('pluginVariables', v);
});
functions.map(function(f, i){
    Entity.add('pluginFunctions', f);
});
commands.map(function(c, i){
    Entity.add('pluginCommands', c);
});

var FormList = require('../form/FormList');
var Form = FormList('OTB_Plugin');
var contextObject = {entity: Entity};

var form = new Form.Create(contextObject).open();
   $.when(form).done(function(formData) {
       if (formData) {
           switch(formData.action) {
               case 'save':
                   formData.values = formData.values || {};
                   if (contextObject['pluginVariables']) {
                       formData.values['pluginVariables'] = contextObject['pluginVariables'];
                   }
                   if (contextObject['pluginFunctions']) {
                       formData.values['pluginFunctions'] = contextObject['pluginFunctions'];
                   }
                   if (contextObject['pluginCommands']) {
                       formData.values['pluginCommands'] = contextObject['pluginCommands'];
                   }
                   if (contextObject['pluginCreator']) {
                       formData.values['pluginCreator'] = contextObject['pluginCreator'];
                   }
                   if (contextObject['pluginUsers']) {
                       formData.values['pluginUsers'] = contextObject['pluginUsers'];
                   }
                   if (contextObject['pluginRepository']) {
                       formData.values['pluginRepository'] = contextObject['pluginRepository'];
                   }
                   Entity.setValues(formData.values);
                   Entity.set('pluginCreator', self.props.user);
                   updateRep(Entity);
                   break;
           }
       }
   });

var updateRep = function(entity){
    var repository = self.props.application.get('appRepository');
    var application = self.props.application;
    var user = self.props.user;
    if(repository.length <= 0){
        var rep = DomainEntitiesList('OTB_Repository');
        var repository = new rep();
    }
    repository.add('repositoryPlugins', entity);
    application.set('appRepository', repository);
    user.add('ownPlugins', entity);
    //DomainAPI.OTB_UserUpdate(user);
    DomainAPI.OTB_ApplicationUpdate(application);
    console.log(entity);
    console.log(application);
}
   };
   componentDidMount() {
   };
   componentWillUnmount() {
   };
}

export default OTB_PublishCustomCategory;
