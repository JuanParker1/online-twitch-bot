// OTB_PlaylistHistory React Component
//
// Generated by IC STRATEGY
//
// WARNING: Do not change this code; it will be overwritten by the next generation run!
//          Change the code only in the Visual Paradigm Project.

import React from 'react';
import * as _ from 'lodash';
var DomainAPI = require('../domain-entity/DomainAPI');
import OTB_YoutubeVideo from './OTB_YoutubeVideo';
import OTB_ThinHR from './OTB_ThinHR';
import OTB_YoutubeHistoryElement from './OTB_YoutubeHistoryElement';
import OTB_GeneralH1 from './OTB_GeneralH1';

class OTB_PlaylistHistory extends React.Component {
   constructor(props) {
       super(props);
       this.state = {
           currentId: ''
       };
   };
   static defaultProps = {
           user: null
   };
   render() {
       var self = this;
       if (true){ 
           return(
               <span className={"playlist-history " + 'cell size-p60 padding20'} style={self.props.style ||{}} >
                  <OTB_GeneralH1 title={'Current Song'} />
                  {(self.props.user.get('ownQueueVideos')[0]) ? <OTB_YoutubeVideo videoId={self.state.currentId} user={self.props.user} autoplay={1} playerId={'currentSong'} /> : <span />}
                  <OTB_ThinHR />
                  <OTB_GeneralH1 classes={'text-light'} title={'History'} />
{                  self.props.user && self.props.user.get('ownHistoryVideos') ? self.props.user.get('ownHistoryVideos').map(function(item, index) {
                      return(<OTB_YoutubeHistoryElement videoObj={item} index={index}  key={item.id || index} />);
                  }) : ''}
               </span>
           );
       } else {
           return (<span />);
       }
   };
   sortFullQueue = () => {
       var self = this;
var videos = self.props.user.get('ownQueueVideos');
var sortArray = _.sortBy(videos, function(obj){ return obj.get('timestampCreate'); });
return sortArray;
   };
   componentDidMount() {
   };
   componentWillReceiveProps(nextProps) {
       var self = this;
if(self.props.user != null){
    var fullQueue = self.sortFullQueue();
    if(fullQueue[0]){
        var vid = fullQueue[0].get('videoUrl').split('/')[fullQueue[0].get('videoUrl').split('/').length - 1];
        self.setState({currentId: vid});
    }
}
   };
   componentWillUnmount() {
   };
}

export default OTB_PlaylistHistory;
