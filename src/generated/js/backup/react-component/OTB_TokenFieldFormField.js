// OTB_TokenFieldFormField React Component
//
// Generated by IC STRATEGY
//
// WARNING: Do not change this code; it will be overwritten by the next generation run!
//          Change the code only in the Visual Paradigm Project.

import React from 'react';
import * as _ from 'lodash';
var DomainAPI = require('../domain-entity/DomainAPI');

class OTB_TokenFieldFormField extends React.Component {
   constructor(props) {
       super(props);
   };
   static defaultProps = {

   };
   render() {
       var Input = ReactBootstrap.Input;
var self = this;
if (self.props.field.isInput) {
   var options = self.props.field.options || self.props.field.attribute.options;
   return (
       <Input type="text" className="tokenfield" label={self.props.field.attribute.label} name={self.props.field.attribute.name} defaultValue={self.props.field.value} autofocus={self.props.field.getFocus} placeholder={self.props.field.attribute.help} />
   );
} else {
   return (
       <div className="form-group">
           <label className="control-label" style={{width: '100%'}}>{self.props.field.attribute.label}</label>
           <div style={{width: '100%'}}>{self.props.field.value}</div>
       </div>
   );
}
   };
   componentDidMount() {
       var self = this;
var $component = $(ReactDOM.findDOMNode(this));
$component.find('.tokenfield').tokenfield({
    delimiter: [',', ' ', ';']
});
$component.find('.tokenfield').on('tokenfield:createtoken', function (e) {
    var data = e.attrs.value.split('|');
    e.attrs.value = data[1] || data[0];
    e.attrs.label = data[1] ? data[0] + ' (' + data[1] + ')' : data[0];
    // validate token, otherwise return false
    if (self.props.field.validate) {
        return self.props.field.validate(e.attrs.value);
    } else {
        return true;
    }
});
if (self.props.field.getFocus) {
    $component.find('.token-input').attr('autofocus', "true");
}
   };
   componentWillUnmount() {
   };
}

export default OTB_TokenFieldFormField;
