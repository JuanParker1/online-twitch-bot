// OTB_PluginPage React Component
//
// Generated by IC STRATEGY
//
// WARNING: Do not change this code; it will be overwritten by the next generation run!
//          Change the code only in the Visual Paradigm Project.

import React from 'react';
import * as _ from 'lodash';
var DomainAPI = require('../domain-entity/DomainAPI');
import { withRouter } from 'react-router-dom';
import * as firebase from 'firebase';
import { FirebaseManager } from '../../../js/4-infrastructure/databaseManagers/FirebaseManager';

class OTB_PluginPage extends React.Component {
   constructor(props) {
       super(props);
       this.state = {
           plugin: null
       };
   };
   static defaultProps = {
           application: null
   };
   render() {
       var self = this;
       if (true){
           return(
               <div className={"page plugin-page " + 'flex-grid page-content padding40'} style={self.props.style ||{"height": "100%"}} >
               </div>
           );
       } else {
           return (<span />);
       }
   };
   componentDidMount() {
       var self = this;
var pid = self.props.match.params.pluginid;
var app = self.props.application;
console.log(app);
if(app && app.get('appRepository').length > 0){
    var rep = app.get('appRepository');
    if(rep.get('repositoryPlugins').length > 0){
        var plugins = rep.get('repositoryPlugins');
        console.log(plugins.get(pid));
        self.setState({ 'plugin': plugins.get(pid) });
    }
}

   };
   componentWillReceiveProps(nextprops){
       var self = this;
       if(self.state.plugin == null) {
           var pid = nextprops.match.params.pluginid;
           var app = nextprops.application;
           if (app && app.get('appRepository')) {
               var rep = app.get('appRepository');
               if (rep.get('repositoryPlugins').length > 0) {
                   var plugins = rep.get('repositoryPlugins');
                   console.log(_.find(plugins, {id:pid}));
                   self.setState({'plugin': _.find(plugins, {id:pid})});
               }
           }
       }
   }
   componentWillUnmount() {
   };
}

export default withRouter(OTB_PluginPage);
