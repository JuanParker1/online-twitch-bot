// OTB_CustomCommandList React Component
//
// Generated by IC STRATEGY
//
// WARNING: Do not change this code; it will be overwritten by the next generation run!
//          Change the code only in the Visual Paradigm Project.

var DomainAPI = require('../domain-entity/DomainAPI');
import React from 'react';
import * as _ from 'lodash';
import OTB_AddCustomCommand from './OTB_AddCustomCommand';
import OTB_CustomCommand from './OTB_CustomCommand';
import OTB_PublishCustomCategory from './OTB_PublishCustomCategory';

class OTB_CustomCommandList extends React.Component {
    constructor(props) {
        super(props);
    };
    static defaultProps = {
        user: null,
        role: 'dropdown',
        userCommandCategory: null,
        application: null
    };
    render() {
        var self = this;
        if (true) {
            return(
                <ul className={"custom-command-list " + 'd-menu toggle-dropdown-menu'} style={self.props.style || {}} data-role={self.props.role} >
                    <OTB_AddCustomCommand user={self.props.user} userCommandCategory={self.props.userCommandCategory} />
                    <OTB_PublishCustomCategory application={self.props.application} userCommandCategory={self.props.userCommandCategory} user={self.props.user} />
                    { ((true) && (self.props.userCommandCategory && self.props.userCommandCategory.get('userCategoryCommands') && self.props.userCommandCategory.get('userCategoryCommands'))) ? self.props.userCommandCategory.get('userCategoryCommands').map(function(item, index) {
                        return (<OTB_CustomCommand userCommand={item} index={index} user={self.props.user} key={item.id || index} />);
                    }) : '' }
                </ul>
            );
        }
        else {
            return <span />;
        };
    };
};

export default OTB_CustomCommandList;
