// OTB_CommandParameters React Component
//
// Generated by IC STRATEGY
//
// WARNING: Do not change this code; it will be overwritten by the next generation run!
//          Change the code only in the Visual Paradigm Project.

var DomainAPI = require('../domain-entity/DomainAPI');
import React from 'react';
import * as _ from 'lodash';
import OTB_Table from './OTB_Table';
import OTB_AddCommandParam from './OTB_AddCommandParam';
import OTB_CommandParamInfo from './OTB_CommandParamInfo';

class OTB_CommandParameters extends React.Component {
    constructor(props) {
        super(props);
    };
    static defaultProps = {
        user: null,
        command: null
    };
    render() {
        var self = this;
        if (true) {
            return(
                <OTB_Table className="o-tb_-command-parameters"  titles={['Parameter Name', 'Parameter Description', 'Parameter Default Value', 'Parameter Handler']} title={'Command Parameters'}>
                    { ((true) && (self.props.command && self.props.command.get('commandParameters') && self.props.command.get('commandParameters'))) ? self.props.command.get('commandParameters').map(function(item, index) {
                        return (<OTB_CommandParamInfo commandParameter={item} index={index} key={item.id || index} />);
                    }) : '' }
                    { (self.props.command.get('entityLocation').indexOf('Application') <= -1 || (self.props.user && self.props.user.hasRole('administrator'))) ? <OTB_AddCommandParam command={self.props.command} /> : <span /> }
                </OTB_Table>
            );
        }
        else {
            return <span />;
        };
    };
};

export default OTB_CommandParameters;
