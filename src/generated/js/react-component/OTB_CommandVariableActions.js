// OTB_CommandVariableActions React Component
//
// Generated by IC STRATEGY
//
// WARNING: Do not change this code; it will be overwritten by the next generation run!
//          Change the code only in the Visual Paradigm Project.

var DomainAPI = require('../domain-entity/DomainAPI');
import React from 'react';
import * as _ from 'lodash';
import { Form } from '../../../js/1-presentation/services/meta/Form';
import * as FormField from '../../../js/1-presentation/services/meta/FormField';

class OTB_CommandVariableActions extends React.Component {
    constructor(props) {
        super(props);
    };
    static defaultProps = {
        commandVariable: null
    };
    render() {
        var self = this;
        return(
            <a href="#" onClick={self.onClick} className="button"><span className="mif-pencil"></span></a>
        );
    };
    onClick = () => {
        var self = this;
                var DomainEntitiesList = require('../domain-entity/DomainEntitiesList');
                var FormList = require('../form/FormList');
                var DefaultForm = FormList('OTB_DefaultCommandVariable');
                var UserForm = FormList('OTB_UserCommandVariable');
                var Entity = DomainEntitiesList('OTB_DefaultCommandVariable');
                var contextObject = {entity: self.props.commandVariable};
        
                var EditorMode = "";
                var Type = self.props.commandVariable.get('type');
        
                if (Type == "0" || Type == "")
                    EditorMode = "";
                else if (Type == "1" || Type == "2")
                    EditorMode = "json"
        
                if (self.props.commandVariable.get('entityLocation').indexOf("Application") > -1) {
                    var Form = new DefaultForm.Update();
                }
                else {
                    var Form = new UserForm.Update();
                }
        
                function openUpdateForm(loadedEntity, user) {
                    var form = Form.open(loadedEntity.getValues());
                    $.when(form).done(function (formData) {
                        if (formData) {
                            switch (formData.action) {
                                case 'save':
                                    loadedEntity.setValues(formData.values);
                                    DomainAPI.OTB_CommandVariableUpdate(loadedEntity, formData.values, user);
                                    break;
                                case 'delete':
                                    DomainAPI.OTB_CommandVariableDelete(loadedEntity, user);
                                    break;
                            }
                        }
                    });
                }
        
                var entity = contextObject.entity || contextObject;
                if (entity.loadStatus === 'proxy') {
                    entity.loadInstance(Entity, entity.id, function (loadedEntity) {
                        openUpdateForm(loadedEntity, contextObject.user);
                    }, contextObject.user);
                } else {
                    openUpdateForm(entity, contextObject.user);
                }
    };
};

export default OTB_CommandVariableActions;
